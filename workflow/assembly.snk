from pathlib import Path
OPERAMS = 'perl /home/ubuntu/OPERA-MS/OPERA-MS.pl'

def getread(wc):
    return config[wc.sample][wc.rtype]

rule link_reads:
    input:
        getread
    output:
        'reads/{sample}/{rtype}.fastq.gz'
    params:
        input_resolved = lambda wc: Path(getread(wc)).resolve()
    shell:
        'ln -s {params.input_resolved} {output}'

rule uncompress_long:
    input:
        'reads/{sample}/nanopore.fastq.gz'
    output:
        temp('reads/{sample}/nanopore.fastq')
    shell:
        'gunzip -c {input} > {output}'

rule operams:
    input:
        sr1 = 'reads/{sample}/r1.fastq.gz',
        sr2 = 'reads/{sample}/r2.fastq.gz',
        lr = 'reads/{sample}/nanopore.fastq'
    params:
        executable = OPERAMS
    output:
        outdir = directory('assembly/operams/{sample}'),
        fasta = protected('assembly/operams/{sample}/contigs.polished.fasta')
    conda:
        config['softparams']['conda']['operams']
    log:
        'logs/{sample}/assembly.operams.log'
    threads:
        16
    shell:
        '({params.executable} --short-read1 {input.sr1} --short-read2 {input.sr2} --long-read {input.lr} --out-dir {output.outdir} --polishing --num-processors {threads})  2> {log}'

rule link_operams:
    input:
        rules.operams.output.fasta
    output:
        'assembly/completed/operams/{sample}.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

rule megahit_paired:
    input:
        r1 = 'reads/{sample}/r1.fastq.gz',
        r2 = 'reads/{sample}/r2.fastq.gz'
    output:
        outdir = directory('assembly/megahit/{sample}'),
        fasta = protected('assembly/megahit/{sample}/final.contigs.fa')   
    params:
        # In this version I remove intermediate files which took a lot of space
        interm = 'assembly/megahit/{sample}/intermediate_contigs'
    conda:
        config['softparams']['conda']['megahit']
    threads:
        16
    log:
        'logs/{sample}/assembly.megahit_paired.log'
    shell:
        'rm -r {output.outdir} && megahit -1 {input.r1} -2 {input.r2} -o {output.outdir} -t {threads} && rm -rf {params.interm} &> {log}'

rule link_megahit:
    input:
        rules.megahit_paired.output.fasta
    output:
        'assembly/completed/megahit/{sample}.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

AVAILABLE = {'megahit', 'operams', 'flye', 'canu'}
DEFAULT = 'none'

def getoutput(sample):
    assembler = config[sample].get('assembler', DEFAULT)
    if assembler not in AVAILABLE:
        if assembler == 'none':
            raise IOError('No assembler was provided for sample: %s and no default assembler is hardcoded' %(sample))
        else:
            raise IOError('Assembler `%s` not found in available assemblers' %(assembler))

    return os.path.join('assembly', 'completed', assembler, sample + '.fa')

rule make_new_config:
    input:
        lambda wc: [getoutput(sample) for sample in config]
    output:
        'config_binning.json'
    params:
        config = config,
        default = DEFAULT
    script:
        'scripts/assembly_make_new_config.py'

rule make_stat:
    input:
        lambda wc: [getoutput(sample) for sample in config]
    output:
        'assemblies.stats.tsv'
    conda:
        config['softparams']['conda']['biopy']
    script:
        'scripts/assembly_stat.py'

"""

rule flye_nanopore:
    input:
        'reads/{group}/nanopore/merged.fastq.gz'
    output: 
        outdir = directory('assembly/flye/{group}/nanopore')
        fasta = protected('assembly/flye/{group}/nanopore/assembly.fasta')
    conda:   
        'envs/flye.yaml'
    log:    
        'logs/{group}/assembly.flye_nanopore.log'
    threads:
        16
    params:
        mgsize = config['assembly']['fly_mg_size']
    shell:
        'flye --meta --min-overlap 3000 --iterations 4 --genome-size {params.mgsize} --out-dir {output.outdir} --threads {threads} --nano-raw {input} &> {log}'

rule link_flye_nanopore:
    input:
        rules.flye_nanopore.output.fasta
    output:
        'references/used/{group}/refmap/flye_nanopore.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

rule flye_pacbio:
    input:
        'reads/{group}/pacbio/merged_{rtype}.fastq.gz'
    output: 
        outdir = directory('assembly/flye/{group}/pacbio/{rtype}')
        fasta = protected('assembly/flye/{group}/pacbio/{rtype}/assembly.fasta')
    conda:   
        'envs/flye.yaml'
    log:    
        'logs/{group}/assembly.flye_pacbio.{rtype}.log'
    threads:
        16
    params:
        mgsize = config['assembly']['fly_mg_size']
    shell:
        'flye --meta --min-overlap 3000 --iterations 4 --genome-size {params.mgsize} --out-dir {output.outdir} --threads {threads} --pacbio-raw {input} 2> {log}'

rule link_flye_pacbio:
    input:
        rules.flye_pacbio.output.fasta
    output:
        'references/used/{group}/refmap/flye_pacbio.{rtype}.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'


# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

rule canu_nanopore:
    input:
        'reads/{group}/nanopore/merged.fastq.gz'
    output: 
        outdir = directory('assembly/canu/{group}/nanopore')
        fasta = protected('assembly/canu/{group}/nanopore/assembly.contigs.fasta')
    conda:   
        'envs/canu.yaml'
    log:    
        'logs/{group}/assembly.canu_nanopore.log'
    threads:
        16
    params:
        mgsize = config['assembly']['fly_mg_size']
    shell:
        'canu -p assembly -d {output.directory} genomeSize={params.mgsize} maxThreads={threads} useGrid=false -nanopore {input.reads} 2> {log}'

rule link_canu_nanopore:
    input:
        rules.canu_nanopore.output.fasta
    output:
        'references/used/{group}/refmap/canu_nanopore.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

rule canu_pacbio:
    input:
        'reads/{group}/pacbio/merged_{rtype}.fastq.gz'
    output: 
        outdir = directory('assembly/canu/{group}/pacbio/{rtype}')
        fasta = protected('assembly/canu/{group}/pacbio/{rtype}/assembly.contigs.fasta')
    conda:   
        'envs/canu.yaml'
    log:    
        'logs/{group}/assembly.canu_pacbio.{rtype}.log'
    threads:
        16
    params:
        mgsize = config['assembly']['fly_mg_size']
    shell:
        'canu -p assembly -d {output.directory} genomeSize={params.mgsize} maxThreads={threads} useGrid=false -pacbio {input.reads} 2> {log}'

rule link_canu_pacbio:
    input:
        rules.canu_pacbio.output.fasta
    output:
        'references/used/{group}/refmap/canu_pacbio.{rtype}.fa'
    shell:
        'ln -s $(pwd)/{input} {output}'

"""